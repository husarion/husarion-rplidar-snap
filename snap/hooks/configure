#!/bin/bash -e

# The configure hook is called every time one the following actions happen:
# - initial snap installation
# - snap refresh
# - whenever the user runs snap set|unset to change a configuration option

# Define a function to log and echo messages
source $SNAP/usr/bin/utils.sh

# # Define the top-level key and the list of valid keys
VALID_DRIVER_KEYS=(
  "channel-type"
  "serial-port"
  "serial-baudrate"
  "frame-id"
  "inverted"
  "angle-compensate"
  "scan-mode"
  "device-namespace"
)

# common
validate_keys "driver" VALID_DRIVER_KEYS[@]

VALID_BOOLEAN_OPTIONS=("true" "false")

# validate configuration
VALID_CONFIGURATION_OPTIONS=(
  "custom"
  "a2m8"
  "a2m12"
  "a3"
  "s1"
  "s2"
  "s3"
)

validate_option "configuration" VALID_CONFIGURATION_OPTIONS[@]

config_value=$(snapctl get configuration)

case "$config_value" in
"a2m8")
  snapctl set driver.channel-type="serial"
  snapctl set driver.serial-baudrate="115200"
  snapctl set driver.scan-mode="Sensitivity"
  ;;
"a2m12" | "a3")
  snapctl set driver.channel-type="serial"
  snapctl set driver.serial-baudrate="256000"
  snapctl set driver.scan-mode="Sensitivity"
  ;;
"s1")
  snapctl set driver.channel-type="serial"
  snapctl set driver.serial-baudrate="256000"
  snapctl set driver.scan-mode!
  ;;
"s2" | "s3")
  snapctl set driver.channel-type="serial"
  snapctl set driver.serial-baudrate="1000000"
  snapctl set driver.scan-mode="DenseBoost"
  ;;
esac

# validate driver.channel-type
VALID_CHANNEL_TYPE_OPTIONS=("serial" "tcp" "udp")
validate_option "driver.channel-type" VALID_CHANNEL_TYPE_OPTIONS[@]

# validate driver.serial-port
validate_serial_port "driver.serial-port"

# validate driver.serial-baudrate
SUPPORTED_SERIAL_BAUDRATE_RANGE=(0 1000000)
validate_number "driver.serial-baudrate" SUPPORTED_SERIAL_BAUDRATE_RANGE[@]

# validate driver.frame-id
validate_regex "driver.frame-id" '^[a-z_-]{1,30}$' "Possible values are text with a maximum length of 30 characters, containing only lowercase letters (a-z),'-' or '_'."

# validate driver.inverted
validate_option "driver.inverted" VALID_BOOLEAN_OPTIONS[@]

# validate driver.angle-compensate
validate_option "driver.angle-compensate" VALID_BOOLEAN_OPTIONS[@]

# validate driver.scan-mode
VALID_SCAN_MODE_OPTIONS=("DenseBoost" "Sensitivity" "Standard")
validate_option "driver.scan-mode" VALID_SCAN_MODE_OPTIONS[@]

# validate device-namespace
DEVICE_NAMESPACE=$(snapctl get driver.device-namespace)

if [[ -n "$DEVICE_NAMESPACE" ]]; then
  validate_regex "driver.device-namespace" '^[a-z_]{1,10}$' "Possible values are text with a maximum length of 10 characters, containing only lowercase letters (a-z) or '_'."
fi

$SNAP/usr/bin/configure_hook_ros.sh

# restart services with new ROS 2 config
for service in daemon; do
  if snapctl services ${SNAP_NAME}.${service} | grep -qw enabled; then
    snapctl restart ${SNAP_NAME}.${service}
    log "Restarted ${SNAP_NAME}.${service}"
  fi
done
